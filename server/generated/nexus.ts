/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
}

export interface NexusGenObjects {
  AllPostsResponseData: { // root type
    data?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    msg?: string | null; // String
  }
  AuthResponseData: { // root type
    fields?: Array<string | null> | null; // [String]
    msg?: string | null; // String
    success?: boolean | null; // Boolean
  }
  Author: { // root type
    name?: string | null; // String
  }
  CreatePostResponseData: { // root type
    data?: NexusGenRootTypes['Post'] | null; // Post
    msg?: string | null; // String
  }
  MeResponseData: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    msg?: string | null; // String
    name?: string | null; // String
  }
  Mutation: {};
  Post: { // root type
    author?: NexusGenRootTypes['Author'] | null; // Author
    authorId?: string | null; // String
    createdAt?: NexusGenScalars['Date'] | null; // Date
    description?: string | null; // String
    id?: string | null; // ID
    title?: string | null; // String
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  PostByIdResponseData: { // root type
    data?: NexusGenRootTypes['Post'] | null; // Post
    msg?: string | null; // String
  }
  Query: {};
  User: { // root type
    createdAt?: string | null; // String
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AllPostsResponseData: { // field return type
    data: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    msg: string | null; // String
  }
  AuthResponseData: { // field return type
    fields: Array<string | null> | null; // [String]
    msg: string | null; // String
    success: boolean | null; // Boolean
  }
  Author: { // field return type
    name: string | null; // String
  }
  CreatePostResponseData: { // field return type
    data: NexusGenRootTypes['Post'] | null; // Post
    msg: string | null; // String
  }
  MeResponseData: { // field return type
    email: string | null; // String
    id: string | null; // ID
    msg: string | null; // String
    name: string | null; // String
  }
  Mutation: { // field return type
    CreatePost: NexusGenRootTypes['CreatePostResponseData'] | null; // CreatePostResponseData
    DeletePost: NexusGenRootTypes['CreatePostResponseData'] | null; // CreatePostResponseData
    LoginUser: NexusGenRootTypes['AuthResponseData'] | null; // AuthResponseData
    LogoutUser: NexusGenRootTypes['AuthResponseData'] | null; // AuthResponseData
    RegisterUser: NexusGenRootTypes['AuthResponseData'] | null; // AuthResponseData
    UpdatePost: NexusGenRootTypes['CreatePostResponseData'] | null; // CreatePostResponseData
  }
  Post: { // field return type
    author: NexusGenRootTypes['Author'] | null; // Author
    authorId: string | null; // String
    createdAt: NexusGenScalars['Date'] | null; // Date
    description: string | null; // String
    id: string | null; // ID
    title: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  PostByIdResponseData: { // field return type
    data: NexusGenRootTypes['Post'] | null; // Post
    msg: string | null; // String
  }
  Query: { // field return type
    AllPosts: NexusGenRootTypes['AllPostsResponseData'] | null; // AllPostsResponseData
    Me: NexusGenRootTypes['MeResponseData'] | null; // MeResponseData
    PostById: NexusGenRootTypes['PostByIdResponseData'] | null; // PostByIdResponseData
  }
  User: { // field return type
    createdAt: string | null; // String
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AllPostsResponseData: { // field return type name
    data: 'Post'
    msg: 'String'
  }
  AuthResponseData: { // field return type name
    fields: 'String'
    msg: 'String'
    success: 'Boolean'
  }
  Author: { // field return type name
    name: 'String'
  }
  CreatePostResponseData: { // field return type name
    data: 'Post'
    msg: 'String'
  }
  MeResponseData: { // field return type name
    email: 'String'
    id: 'ID'
    msg: 'String'
    name: 'String'
  }
  Mutation: { // field return type name
    CreatePost: 'CreatePostResponseData'
    DeletePost: 'CreatePostResponseData'
    LoginUser: 'AuthResponseData'
    LogoutUser: 'AuthResponseData'
    RegisterUser: 'AuthResponseData'
    UpdatePost: 'CreatePostResponseData'
  }
  Post: { // field return type name
    author: 'Author'
    authorId: 'String'
    createdAt: 'Date'
    description: 'String'
    id: 'ID'
    title: 'String'
    updatedAt: 'Date'
  }
  PostByIdResponseData: { // field return type name
    data: 'Post'
    msg: 'String'
  }
  Query: { // field return type name
    AllPosts: 'AllPostsResponseData'
    Me: 'MeResponseData'
    PostById: 'PostByIdResponseData'
  }
  User: { // field return type name
    createdAt: 'String'
    email: 'String'
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreatePost: { // args
      description?: string | null; // String
      title: string; // String!
    }
    DeletePost: { // args
      postId: string; // String!
    }
    LoginUser: { // args
      email: string; // String!
      password: string; // String!
    }
    RegisterUser: { // args
      email: string; // String!
      loginDirectly: boolean; // Boolean!
      name: string; // String!
      password: string; // String!
    }
    UpdatePost: { // args
      description?: string | null; // String
      postId: string; // String!
      title: string; // String!
    }
  }
  Query: {
    PostById: { // args
      postId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}